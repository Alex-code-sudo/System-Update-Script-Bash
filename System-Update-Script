#!/bin/bash

# System Update Manager - Ubuntu/Debian Update Script

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Color definitions
readonly RED='\033[1;31m'
readonly GREEN='\033[1;32m'
readonly YELLOW='\033[1;33m'
readonly CYAN='\033[1;36m'
readonly BLUE='\033[1;34m'
readonly PURPLE='\033[1;35m'
readonly NC='\033[0m' # No Color

# Configuration
readonly SCRIPT_NAME="System Update Manager"
readonly VERSION="2.0"
readonly LOGDIR="$HOME/.update-logs"
readonly LOG_RETENTION_DAYS=30

# Ensure log directory exists
mkdir -p "$LOGDIR"

# Clean old logs (older than specified days)
find "$LOGDIR" -type f -name "*.log" -mtime +${LOG_RETENTION_DAYS} -delete 2>/dev/null || true

# Create new log file
readonly LOGFILE="$LOGDIR/update_$(date +%Y%m%d_%H%M%S).log"

# Logging function with improved formatting
log_action() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> "$LOGFILE"
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $message"
}

# Enhanced error handling
handle_error() {
    local error_msg="$1"
    local exit_code="${2:-1}"
    echo -e "${RED}[ERROR]${NC} $error_msg" | tee -a "$LOGFILE"
    echo -e "${RED}Check log file: $LOGFILE${NC}"
    exit "$exit_code"
}

# Success message function
show_success() {
    echo -e "${GREEN}✓${NC} $1"
    log_action "SUCCESS: $1"
}

# Warning message function
show_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
    log_action "WARNING: $1"
}

# Check if running as root (generally not recommended)
check_root() {
    if [[ $EUID -eq 0 ]]; then
        show_warning "Running as root. This is usually not necessary for package updates."
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        [[ ! $REPLY =~ ^[Yy]$ ]] && { echo "Aborted."; exit 0; }
    fi
}

# Check internet connectivity
check_internet() {
    if ! ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
        handle_error "No internet connection detected. Updates require internet access."
    fi
}

# Update functions with better error handling
update_apt() {
    log_action "Starting apt update..."
    if sudo apt update 2>&1 | tee -a "$LOGFILE"; then
        show_success "Package lists updated"
        return 0
    else
        handle_error "Failed to update package lists"
    fi
}

upgrade_apt() {
    log_action "Starting apt dist-upgrade..."
    if sudo apt list --upgradable 2>/dev/null | grep -q upgradable; then
        echo -e "${CYAN}Upgradable packages found. Proceeding with upgrade...${NC}"
        if sudo apt dist-upgrade -y 2>&1 | tee -a "$LOGFILE"; then
            show_success "System packages upgraded"
            return 0
        else
            handle_error "Failed to upgrade packages"
        fi
    else
        echo -e "${GREEN}✓${NC} System is already up to date"
        log_action "No packages to upgrade"
        return 0
    fi
}

cleanup_apt() {
    log_action "Starting system cleanup..."
    local cleanup_success=true
    
    if ! sudo apt autoremove -y 2>&1 | tee -a "$LOGFILE"; then
        cleanup_success=false
    fi
    
    if ! sudo apt autoclean 2>&1 | tee -a "$LOGFILE"; then
        cleanup_success=false
    fi
    
    if [[ "$cleanup_success" == true ]]; then
        show_success "System cleanup completed"
        return 0
    else
        handle_error "System cleanup failed"
    fi
}

update_flatpak() {
    if command -v flatpak >/dev/null 2>&1; then
        log_action "Starting Flatpak updates..."
        if flatpak update -y 2>&1 | tee -a "$LOGFILE"; then
            show_success "Flatpak applications updated"
            return 0
        else
            show_warning "Flatpak update encountered issues"
            return 1
        fi
    else
        echo -e "${YELLOW}ℹ${NC} Flatpak not installed - skipping"
        return 0
    fi
}

update_snap() {
    if command -v snap >/dev/null 2>&1; then
        log_action "Starting Snap updates..."
        if sudo snap refresh 2>&1 | tee -a "$LOGFILE"; then
            show_success "Snap packages updated"
            return 0
        else
            show_warning "Snap update encountered issues"
            return 1
        fi
    else
        echo -e "${YELLOW}ℹ${NC} Snap not installed - skipping"
        return 0
    fi
}

# Enhanced header with version info
show_header() {
    clear
    echo -e "${CYAN}"
    echo '██╗   ██╗██████╗ ██████╗  █████╗ ████████╗███████╗'
    echo '██║   ██║██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝██╔════╝'
    echo '██║   ██║██████╔╝██║  ██║███████║   ██║   █████╗  '
    echo '██║   ██║██╔═══╝ ██║  ██║██╔══██║   ██║   ██╔══╝  '
    echo '╚██████╔╝██║     ██████╔╝██║  ██║   ██║   ███████╗'
    echo ' ╚═════╝ ╚═╝     ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚══════╝'
    echo -e "${NC}"
    echo -e "${PURPLE}           $SCRIPT_NAME v$VERSION${NC}"
    echo -e "${BLUE}     Advanced package management for Ubuntu/Debian${NC}"
    echo
}

# Improved menu with better descriptions
show_menu() {
    echo -e "${GREEN}┌─────────────────────────────────────────────────┐${NC}"
    echo -e "${GREEN}│                UPDATE OPTIONS                   │${NC}"
    echo -e "${GREEN}├─────────────────────────────────────────────────┤${NC}"
    echo -e "${GREEN}│ 1)${NC} Update package lists     ${CYAN}[apt update]${NC}      ${GREEN}│${NC}"
    echo -e "${GREEN}│ 2)${NC} Upgrade packages         ${CYAN}[apt upgrade]${NC}     ${GREEN}│${NC}"
    echo -e "${GREEN}│ 3)${NC} System cleanup           ${CYAN}[autoremove]${NC}     ${GREEN}│${NC}"
    echo -e "${GREEN}│ 4)${NC} Complete APT workflow    ${CYAN}[1+2+3]${NC}          ${GREEN}│${NC}"
    echo -e "${GREEN}│ 5)${NC} Update Flatpak apps      ${CYAN}[flatpak]${NC}        ${GREEN}│${NC}"
    echo -e "${GREEN}│ 6)${NC} Update Snap packages     ${CYAN}[snap]${NC}           ${GREEN}│${NC}"
    echo -e "${GREEN}│ 7)${NC} Full system update       ${CYAN}[everything]${NC}     ${GREEN}│${NC}"
    echo -e "${GREEN}│ 8)${NC} Show system info                             ${GREEN}│${NC}"
    echo -e "${GREEN}│ 9)${NC} Exit                                         ${GREEN}│${NC}"
    echo -e "${GREEN}└─────────────────────────────────────────────────┘${NC}"
    echo
}

# System information display
show_system_info() {
    echo -e "${CYAN}System Information:${NC}"
    echo "─────────────────────"
    echo "OS: $(lsb_release -d 2>/dev/null | cut -f2 || echo "Unknown")"
    echo "Kernel: $(uname -r)"
    echo "Architecture: $(uname -m)"
    echo "Uptime: $(uptime -p 2>/dev/null || uptime)"
    echo "Log directory: $LOGDIR"
    echo "Current log: $(basename "$LOGFILE")"
    
    # Package manager availability
    echo -e "\n${CYAN}Available Package Managers:${NC}"
    command -v apt >/dev/null && echo "✓ APT" || echo "✗ APT"
    command -v flatpak >/dev/null && echo "✓ Flatpak" || echo "✗ Flatpak"
    command -v snap >/dev/null && echo "✓ Snap" || echo "✗ Snap"
    echo
}

# Progress indicator for long operations
show_progress() {
    local pid=$1
    local message="$2"
    local spin='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
    local i=0
    
    while kill -0 "$pid" 2>/dev/null; do
        printf "\r${YELLOW}%s${NC} %s" "${spin:$i:1}" "$message"
        i=$(( (i+1) % ${#spin} ))
        sleep 0.1
    done
    printf "\r"
}

# Enhanced main function with better flow
main() {
    # Initial checks
    log_action "=== Script started by $(whoami) ==="
    log_action "Version: $VERSION"
    log_action "Log file: $LOGFILE"
    
    check_root
    check_internet
    
    while true; do
        show_header
        show_menu
        
        read -p "$(echo -e "${CYAN}Please select an option (1-9): ${NC}")" -n 1 -r opt
        echo  # New line after input
        
        log_action "User selected option: $opt"
        
        case $opt in
            1)
                echo -e "${YELLOW}Updating package lists...${NC}"
                update_apt
                ;;
            2)
                echo -e "${YELLOW}Upgrading system packages...${NC}"
                upgrade_apt
                ;;
            3)
                echo -e "${YELLOW}Cleaning up system...${NC}"
                cleanup_apt
                ;;
            4)
                echo -e "${YELLOW}Performing complete APT update workflow...${NC}"
                update_apt && upgrade_apt && cleanup_apt && \
                show_success "Complete APT update workflow finished"
                ;;
            5)
                echo -e "${YELLOW}Updating Flatpak applications...${NC}"
                update_flatpak
                ;;
            6)
                echo -e "${YELLOW}Updating Snap packages...${NC}"
                update_snap
                ;;
            7)
                echo -e "${YELLOW}Performing full system update...${NC}"
                echo -e "${CYAN}This will update all package managers...${NC}"
                update_apt && upgrade_apt && cleanup_apt && update_flatpak && update_snap && \
                show_success "Full system update completed successfully!"
                ;;
            8)
                show_system_info
                ;;
            9)
                log_action "=== Script terminated by user ==="
                echo -e "${GREEN}Thanks for using $SCRIPT_NAME!${NC}"
                echo -e "${BLUE}Logs saved to: $LOGFILE${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option '$opt'. Please select 1-9.${NC}"
                sleep 1
                continue
                ;;
        esac
        
        echo
        echo -e "${BLUE}Operation completed.${NC}"
        read -p "$(echo -e "${CYAN}Press Enter to return to menu...${NC}")"
    done
}

# Trap for clean exit
trap 'echo -e "\n${YELLOW}Script interrupted. Logs saved to: $LOGFILE${NC}"; exit 130' INT TERM

# Start the script
main "$@"
